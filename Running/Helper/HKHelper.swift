//
//  HKHelper.swift
//  Running
//
//  Created by Ah lucie nous g√™nes üçÑ on 23/01/2023.
//

import Foundation
import HealthKit
import CoreLocation
import MapKit

struct HKHelper {
    static let healthStore = HKHealthStore()
    static let available = HKHealthStore.isHealthDataAvailable()
    
    // La m√©thode requestAuth() demande √† l'utilisateur l'autorisation d'acc√©der √† ses donn√©es de sant√©.
    static func requestAuth() async -> HKAuthorizationStatus {
        // D√©finition des types de donn√©es √† partager et √† lire dans HealthKit.
        let types: Set = [
            HKObjectType.workoutType(),
            HKSeriesType.workoutRoute(),
            HKObjectType.quantityType(forIdentifier: .heartRate)!,
        ]
        
        // Demande de l'autorisation d'acc√©der aux types de donn√©es d√©finis ci-dessus.
        try? await healthStore.requestAuthorization(toShare: types, read: types)
        return status
    }
    
    // La m√©thode status renvoie l'√©tat actuel de l'autorisation d'acc√©der aux donn√©es de sant√©.
    static var status: HKAuthorizationStatus {
        // V√©rification de l'√©tat d'autorisation pour les types de donn√©es d'entra√Ænement et de parcours.
        let workoutStatus = healthStore.authorizationStatus(for: HKObjectType.workoutType())
        let routeStatus = healthStore.authorizationStatus(for: HKSeriesType.workoutRoute())
        let heartRateStatus = healthStore.authorizationStatus(for: HKObjectType.quantityType(forIdentifier: .heartRate)!)


        // D√©termine si les deux types de donn√©es ont √©t√© autoris√©s √† √™tre partag√©s.
        if workoutStatus == .sharingAuthorized && routeStatus == .sharingAuthorized && heartRateStatus == .sharingAuthorized{
            return .sharingAuthorized
        } else if workoutStatus == .notDetermined && routeStatus == .notDetermined && heartRateStatus == .notDetermined{
            return .notDetermined
        } else {
            return .sharingDenied
        }
    }
    
    // La m√©thode loadWorkouts charge une liste d'entra√Ænements √† partir des donn√©es de sant√© de l'utilisateur.
    static func loadWorkouts(completion: @escaping ([HKWorkout]) -> Void) {
        // D√©finition d'un tri pour les r√©sultats de la requ√™te d'entra√Ænement pour trier par date de d√©but, de la plus r√©cente √† la plus ancienne.
        let sort = NSSortDescriptor(key: HKSampleSortIdentifierStartDate, ascending: false)
        let query = HKSampleQuery(sampleType: .workoutType(), predicate: nil, limit: HKObjectQueryNoLimit, sortDescriptors: [sort]) { query, samples, error in
            guard let workouts = samples as? [HKWorkout] else {
                completion([])
                return
            }
            completion(workouts)
        }
        healthStore.execute(query)
    }
    
    // La m√©thode loadWorkoutRoute charge un parcours d'entra√Ænement √† partir des donn√©es de sant√© de l'utilisateur.
    static func loadWorkoutRoute(hkWorkout: HKWorkout, completion: @escaping ([CLLocation]) -> Void) {
        // D√©finition du type d'√©chantillon de s√©rie d'entra√Ænement pour les parcours d'entra√Ænement.
        let type = HKSeriesType.workoutRoute()
        
        // Pr√©dicat pour r√©cup√©rer les s√©ries d'entra√Ænement
        let predicate = HKQuery.predicateForObjects(from: hkWorkout)
        
        let routeQuery = HKSampleQuery(sampleType: type, predicate: predicate, limit: HKObjectQueryNoLimit, sortDescriptors: nil) { query, samples, error in
            guard let route = samples?.first as? HKWorkoutRoute else {
                completion([])
                return
            }
            
            var locations = [CLLocation]()
            let locationsQuery = HKWorkoutRouteQuery(route: route) { query, newLocations, finished, error in
                locations.append(contentsOf: newLocations ?? [])
                if finished {
                    completion(locations)
                }
            }
            self.healthStore.execute(locationsQuery)
        }
        healthStore.execute(routeQuery)
    }
    
    
    static func loadHeartRateData(completion: @escaping ([HKQuantitySample]) -> Void) {
        // Cr√©ation d'un type de quantit√© pour la fr√©quence cardiaque
        guard let heartRateType = HKQuantityType.quantityType(forIdentifier: .heartRate) else {
            completion([])
            return
        }
        
        // V√©rification de l'autorisation pour la fr√©quence cardiaque
        let heartRateStatus = healthStore.authorizationStatus(for: heartRateType)
        guard heartRateStatus == .sharingAuthorized else {
            completion([])
            return
        }
        
        // D√©finition d'un tri pour les r√©sultats de la requ√™te de fr√©quence cardiaque pour trier par date, de la plus r√©cente √† la plus ancienne.
        let sort = NSSortDescriptor(key: HKSampleSortIdentifierStartDate, ascending: false)
        let query = HKSampleQuery(sampleType: heartRateType, predicate: nil, limit: HKObjectQueryNoLimit, sortDescriptors: [sort]) { query, samples, error in
            guard let heartRateSamples = samples as? [HKQuantitySample] else {
                completion([])
                return
            }
            completion(heartRateSamples)
        }
        healthStore.execute(query)
    }

    
//function qui permet de mettre a jour les donner de la frequence cardique
    func startHeartRateUpdates() {
        // V√©rifie si la lecture des donn√©es de fr√©quence cardiaque est autoris√©e
        guard HKHealthStore.isHealthDataAvailable() else {
            return
        }
        
        // V√©rifie si l'autorisation de lecture des donn√©es de fr√©quence cardiaque a √©t√© accord√©e
        let heartRateType = HKQuantityType.quantityType(forIdentifier: .heartRate)!
        let heartRateStatus = HKHelper.healthStore.authorizationStatus(for: heartRateType)
        guard heartRateStatus == .sharingAuthorized else {
            return
        }
        
        // D√©marre la prise de la fr√©quence cardiaque toutes les 2 minutes
        let timer = Timer.scheduledTimer(withTimeInterval: 120.0, repeats: true) { timer in
            // Cr√©e une requ√™te pour r√©cup√©rer la derni√®re lecture de la fr√©quence cardiaque
            let endDate = Date()
            let startDate = endDate.addingTimeInterval(-120.0)
            let predicate = HKQuery.predicateForSamples(withStart: startDate, end: endDate, options: .strictEndDate)
            let sortDescriptor = NSSortDescriptor(key: HKSampleSortIdentifierStartDate, ascending: false)
            let query = HKSampleQuery(sampleType: heartRateType, predicate: predicate, limit: 1, sortDescriptors: [sortDescriptor]) { query, results, error in
                guard let sample = results?.first as? HKQuantitySample else {
                    print("No heart rate data found")
                    return
                }
                
                let heartRateUnit = HKUnit(from: "count/min")
                let heartRate = sample.quantity.doubleValue(for: heartRateUnit)
                
                // Traiter la fr√©quence cardiaque
                print("Heart rate: \(heartRate)")
            }
            
            // Ex√©cute la requ√™te
            HKHelper.healthStore.execute(query)
        }
        
        // Ajoute le minuteur √† la boucle de l'√©v√©nement
        RunLoop.current.add(timer, forMode: .common)
    }


     
     

}



