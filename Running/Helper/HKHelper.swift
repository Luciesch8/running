//
//  HKHelper.swift
//  Running
//
//  Created by Ah lucie nous g√™nes üçÑ on 23/01/2023.
//

import Foundation
import HealthKit
import CoreLocation
import MapKit

struct HKHelper {
    static let healthStore = HKHealthStore()
    static let available = HKHealthStore.isHealthDataAvailable()
    
    // La m√©thode requestAuth() demande √† l'utilisateur l'autorisation d'acc√©der √† ses donn√©es de sant√©.
    static func requestAuth() async -> HKAuthorizationStatus {
        // D√©finition des types de donn√©es √† partager et √† lire dans HealthKit.
        let types: Set = [
            HKObjectType.workoutType(),
            HKSeriesType.workoutRoute()
        ]
        
        // Demande de l'autorisation d'acc√©der aux types de donn√©es d√©finis ci-dessus.
        try? await healthStore.requestAuthorization(toShare: types, read: types)
        return status
    }
    
    // La m√©thode status renvoie l'√©tat actuel de l'autorisation d'acc√©der aux donn√©es de sant√©.
    static var status: HKAuthorizationStatus {
        // V√©rification de l'√©tat d'autorisation pour les types de donn√©es d'entra√Ænement et de parcours.
        let workoutStatus = healthStore.authorizationStatus(for: HKObjectType.workoutType())
        let routeStatus = healthStore.authorizationStatus(for: HKSeriesType.workoutRoute())
        
        // D√©termine si les deux types de donn√©es ont √©t√© autoris√©s √† √™tre partag√©s.
        if workoutStatus == .sharingAuthorized && routeStatus == .sharingAuthorized {
            return .sharingAuthorized
        } else if workoutStatus == .notDetermined && routeStatus == .notDetermined {
            return .notDetermined
        } else {
            return .sharingDenied
        }
    }
    
    // La m√©thode loadWorkouts charge une liste d'entra√Ænements √† partir des donn√©es de sant√© de l'utilisateur.
    static func loadWorkouts(completion: @escaping ([HKWorkout]) -> Void) {
        // D√©finition d'un tri pour les r√©sultats de la requ√™te d'entra√Ænement pour trier par date de d√©but, de la plus r√©cente √† la plus ancienne.
        let sort = NSSortDescriptor(key: HKSampleSortIdentifierStartDate, ascending: false)
        let query = HKSampleQuery(sampleType: .workoutType(), predicate: nil, limit: HKObjectQueryNoLimit, sortDescriptors: [sort]) { query, samples, error in
            guard let workouts = samples as? [HKWorkout] else {
                completion([])
                return
            }
            completion(workouts)
        }
        healthStore.execute(query)
    }
    
    // La m√©thode loadWorkoutRoute charge un parcours d'entra√Ænement √† partir des donn√©es de sant√© de l'utilisateur.
    static func loadWorkoutRoute(hkWorkout: HKWorkout, completion: @escaping ([CLLocation]) -> Void) {
        // D√©finition du type d'√©chantillon de s√©rie d'entra√Ænement pour les parcours d'entra√Ænement.
        let type = HKSeriesType.workoutRoute()
        
        // Pr√©dicat pour r√©cup√©rer les s√©ries d'entra√Ænement
        let predicate = HKQuery.predicateForObjects(from: hkWorkout)
        
        let routeQuery = HKSampleQuery(sampleType: type, predicate: predicate, limit: HKObjectQueryNoLimit, sortDescriptors: nil) { query, samples, error in
            guard let route = samples?.first as? HKWorkoutRoute else {
                completion([])
                return
            }
            
            var locations = [CLLocation]()
            let locationsQuery = HKWorkoutRouteQuery(route: route) { query, newLocations, finished, error in
                locations.append(contentsOf: newLocations ?? [])
                if finished {
                    completion(locations)
                }
            }
            self.healthStore.execute(locationsQuery)
        }
        healthStore.execute(routeQuery)
    }
}
